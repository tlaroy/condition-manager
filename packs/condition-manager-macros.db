{"name":"Console","permission":{"default":0,"ozsyqur2oxGbhWjU":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.BozL6wZLx2C93erF"}},"scope":"global","command":"/**\n * Condition Manager.\n *\n *      Console Macro\n *      v0.0.2\n *\n * Console macro to enable/disable module hook.\n */\n\nconsole.info(String(game.ConditionManager.CF_CONST.CF_LABEL + \" | %c\" + game.ConditionManager.CF_CONST.CF_NAME + \"%c v\" + game.ConditionManager.CF_CONST.CF_VERSION + \" - CONSOLE\" + \".\"), \"color:\" + game.ConditionManager.CF_CONST.CONSOLE_GREEN, \"color:\" + game.ConditionManager.CF_CONST.CONSOLE_DEFAULT);\n\n/**\n* dialog.\n*/\n\nfunction dialogDisableTemplate() {\n    return `<form><div>\n                <h2>Console</label></h2>\n                </br><label>Condition Manager is: ENABLED</label></br></br></br>\n            </div></form>`;\n}\n\nfunction dialogEnableTemplate() {\n    return `<form><div>\n                <h2>Console</label></h2>\n                </br><label>Condition Manager is: DISABLED</label></br></br></br>\n            </div></form>`;\n}\n\nfunction showDialog(enabled_state) {\n    var dialog;\n    if (enabled_state) {\n        // disable dialog.\n        dialog = new Dialog({\n            title: \"Condition Manager\",\n            content: dialogDisableTemplate(),\n            buttons: {\n                // continue with callback.\n                disable: {\n                    icon: \"<i class='fas fa-toggle-off'></i>\",\n                    label: \"Disable\",\n                    callback: async (html) => { callbackDisable() }\n                },\n                // or cancel and done.\n                cancel: {\n                    icon: \"<i class='fas fa-times'></i>\",\n                    label: \"Cancel\",\n                    callback: async (html) => { },\n                }\n            },\n            default: \"disable\",\n            close: async (html) => { },\n        }).render(true);\n    }\n    else {\n        // enable dialog.\n        dialog = new Dialog({\n            title: \"Condition Manager\",\n            content: dialogEnableTemplate(),\n            buttons: {\n                // continue with callback.\n                enable: {\n                    icon: \"<i class='fas fa-toggle-on'></i>\",\n                    label: \"Enable\",\n                    callback: async (html) => { callbackEnable() }\n                },\n                // or cancel and done.\n                cancel: {\n                    icon: \"<i class='fas fa-times'></i>\",\n                    label: \"Cancel\",\n                    callback: async (html) => { },\n                }\n            },\n            default: \"enable\",\n            close: async (html) => { },\n        }).render(true);\n    }\n}\n\n/**\n* dialog callbacks.\n*/\n\nasync function callbackEnable() {\n    game.ConditionManager.enableConditionManager();\n}\n\nasync function callbackDisable() {\n    game.ConditionManager.disableConditionManager();\n}\n\n/**\n* main.\n*/\n\nfunction main() {\n    if (!game.user.isGM) return;\n    showDialog(game.ConditionManager.isEnabled());\n}\n\nmain();","author":"ozsyqur2oxGbhWjU","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"cvSGfk1UVsXKdvtx"}
{"name":"Examples","permission":{"default":0,"ozsyqur2oxGbhWjU":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.Bw1LrTH2rxtcppvR"}},"scope":"global","command":"/**\n * Condition Manager.\n *\n *      Examples Macro\n *      v0.0.2\n *\n * Example macro demonstrating calls to the module.\n */\n\nconsole.info(String(game.ConditionManager.CF_CONST.CF_LABEL + \" | %c\" + game.ConditionManager.CF_CONST.CF_NAME + \"%c v\" + game.ConditionManager.CF_CONST.CF_VERSION + \" - EXAMPLES\" + \".\"), \"color:\" + game.ConditionManager.CF_CONST.CONSOLE_GREEN, \"color:\" + game.ConditionManager.CF_CONST.CONSOLE_DEFAULT);\n\n/**\n* arguments.\n*/\n\nif (args.length == 0) {\n    console.info(game.ConditionManager.CF_CONST.CF_LABEL + \" | No arguments passed.\");\n} else {\n    for (var i = 0; i < args.length; i++) {\n        console.info(game.ConditionManager.CF_CONST.CF_LABEL + \" | Argument[\", i, \"]: \", args[i]);\n    }\n    return;\n}\n\n/**\n* dialog.\n*/\n\nfunction dialogTemplate() {\n    return `<form><div>\n                <h2>Example</label></h2>\n                </br><label>Target Bleeding Condition</label></br></br></br>\n            </div></form>`;\n}\n\nfunction showDialog() {\n    var dialog = new Dialog({\n        title: \"Condition Manager\",\n        content: dialogTemplate(),\n        buttons: {\n            // continue with callbacks.\n            apply: {\n                icon: \"<i class='fas fa-toggle-off'></i>\",\n                label: \"Apply\",\n                callback: async (html) => { callbackApply();  dialog.render(true); }\n            },\n            update: {\n                icon: \"<i class='fas fa-toggle-off'></i>\",\n                label: \"Update\",\n                callback: async (html) => { callbackUpdate(); dialog.render(true); }\n            },\n            remove: {\n                icon: \"<i class='fas fa-toggle-off'></i>\",\n                label: \"Remove\",\n                callback: async (html) => { callbackRemove(); dialog.render(true); }\n            },\n            // or cancel and done.\n            cancel: {\n                icon: \"<i class='fas fa-times'></i>\",\n                label: \"Cancel\",\n                callback: async (html) => { },\n            }\n        },\n        default: \"cancel\",\n        close:   async (html) => { },\n    }).render(true);\n}\n\n/**\n* dialog callbacks.\n*/\n\nasync function callbackApply() {\n    // get target.\n    var target = getTargetedToken();\n    if (target == null) return false;\n\n    // get ConditionManager namespace.\n    var cfn = game.ConditionManager;\n    if (cfn == null) return false;\n\n    // get condition manager.\n    var mgr = cfn.getConditionManager();\n    if (mgr == null) return false;\n\n    var retval;\n\n    // apply.\n    retval = await mgr.apply(cfn.CF_CONST.BLEEDING_LABEL, target);\n    if (!retval) return false;\n\n    // set duration of turns to 2.\n    retval = await mgr.setDuration(cfn.CF_CONST.BLEEDING_LABEL, cfn.CF_CONST.TURNS, 2, target);\n    if (!retval) return false;\n\n    return true;\n}\n\nasync function callbackUpdate() {\n    // get target.\n    var target = getTargetedToken();\n    if (target == null) return false;\n\n    // get ConditionManager namespace.\n    var cfn = game.ConditionManager;\n    if (cfn == null) return false;\n\n    // get condition manager.\n    var mgr = cfn.getConditionManager();\n    if (mgr == null) return false;\n\n    var retval;\n\n    // set effect attribute value to -10 (default is 3).\n    retval = await mgr.setEffectAttribute(cfn.CF_CONST.BLEEDING_LABEL, cfn.CF_CONST.ATTRIBUTE_HP_KEY, cfn.CF_CONST.ATTRIBUTE_VALUE, -10, target);\n    if (!retval) return false;\n\n    // set duration of turns to null (was set to 2 by apply).\n    retval = await mgr.setDuration(cfn.CF_CONST.BLEEDING_LABEL, cfn.CF_CONST.TURNS, null, target);\n    if (!retval) return false;\n\n    // set duration of rounds to 10.\n    retval = await mgr.setDuration(cfn.CF_CONST.BLEEDING_LABEL, cfn.CF_CONST.ROUNDS, 10, target);\n    if (!retval) return false;\n\n    return true;\n}\n\nasync function callbackRemove() {\n    // get target.\n    var target = getTargetedToken();\n    if (target == null) return false;\n\n    // get ConditionManager namespace.\n    var cfn = game.ConditionManager;\n    if (cfn == null) return false;\n\n    // get condition manager.\n    var mgr = cfn.getConditionManager();\n    if (mgr == null) return false;\n\n    var retval;\n\n    // remove.\n    retval = await mgr.remove(cfn.CF_CONST.BLEEDING_LABEL, target);\n    if (!retval) return false;\n\n    return true;\n}\n\n/**\n* get tokens.\n*/\n\nfunction getSelectedToken() {\n    // selected actors.\n    var selects = canvas.tokens.controlled;\n    if (selects === undefined) return null;\n    // if we want one, and only one.\n    if (selects.length == 0 || selects.length > 1) {\n        console.warn(game.ConditionManager.CF_CONST.CF_LABEL + \" | No token selected.\");\n        return null;\n    }\n    // selected actor.\n    var select = canvas.tokens.controlled[0];\n    return select;\n}\n\nfunction getTargetedToken() {\n    // targeted actors.\n    var targets = Array.from(game.user.targets);\n    if (targets === undefined) return null;\n    // if we want one, and only one.\n    if (targets.length == 0 || targets.length > 1) {\n        console.warn(game.ConditionManager.CF_CONST.CF_LABEL + \" | No token targeted.\");\n        return null;\n    }\n    // targeted actor.\n    var target = targets[0].actor;\n    return target;\n}\n\n/**\n* main.\n*/\n\nfunction main() {\n    if (!game.user.isGM) return;\n\n    // get ConditionManager namespace.\n    var cfn = game.ConditionManager;\n\n    // is condition-manager enabled?\n    var enabled = cfn.isEnabled();\n    if (!enabled) cfn.enableTables();\n\n    showDialog();\n}\n\nmain();","author":"ozsyqur2oxGbhWjU","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"widMB6wsLeI4JW2P"}
{"$$deleted":true,"_id":"cvSGfk1UVsXKdvtx"}
{"$$deleted":true,"_id":"widMB6wsLeI4JW2P"}
{"name":"Examples","permission":{"default":0,"ozsyqur2oxGbhWjU":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.Bw1LrTH2rxtcppvR"}},"scope":"global","command":"/**\n * Condition Manager.\n *\n *      Examples Macro\n *      v0.0.3\n *\n * Example macro demonstrating calls to the module.\n */\n\nconsole.info(String(game.ConditionManager.CM_CONST.CM_LABEL + \" | %c\" + game.ConditionManager.CM_CONST.CM_NAME + \"%c v\" + game.ConditionManager.CM_CONST.CM_VERSION + \" - EXAMPLES\" + \".\"), \"color:\" + game.ConditionManager.CM_CONST.CONSOLE_GREEN, \"color:\" + game.ConditionManager.CM_CONST.CONSOLE_DEFAULT);\n\n/**\n* arguments.\n*\n* If arguments are passed when this macro is executed they will appear in the args[] array.\n*/\n\nif (args.length == 0) {\n    console.info(game.ConditionManager.CM_CONST.CM_LABEL + \" | No arguments passed.\");\n} else {\n    for (var i = 0; i < args.length; i++) {\n        console.info(game.ConditionManager.CM_CONST.CM_LABEL + \" | Argument[\", i, \"]: \", args[i]);\n    }\n    return;\n}\n\n/**\n* dialog.\n*\n* A simple dialog to exercise module functionality.\n*/\n\nfunction dialogTemplate() {\n    return `<form><div>\n                <h2>Example</label></h2>\n                </br><label>Bleeding - Choose a target</label></br></br></br>\n            </div></form>`;\n}\n\nfunction showDialog() {\n    var dialog = new Dialog({\n        title: \"Condition Manager\",\n        content: dialogTemplate(),\n        buttons: {\n            // continue with callbacks.\n            apply: {\n                icon: \"<i class='fas fa-toggle-off'></i>\",\n                label: \"Apply\",\n                callback: async (html) => { callbackApply();  dialog.render(true); }\n            },\n            update: {\n                icon: \"<i class='fas fa-toggle-off'></i>\",\n                label: \"Update\",\n                callback: async (html) => { callbackUpdate(); dialog.render(true); }\n            },\n            remove: {\n                icon: \"<i class='fas fa-toggle-off'></i>\",\n                label: \"Remove\",\n                callback: async (html) => { callbackRemove(); dialog.render(true); }\n            },\n            // or cancel and done.\n            cancel: {\n                icon: \"<i class='fas fa-times'></i>\",\n                label: \"Cancel\",\n                callback: async (html) => { },\n            }\n        },\n        default: \"cancel\",\n        close:   async (html) => { },\n    }).render(true);\n}\n\n/**\n* get target.\n*\n* Obtain a currently targeted actor.\n*/\n\nfunction getTargetedActor() {\n    // targeted token.\n    var targets = Array.from(game.user.targets);\n    if (targets === undefined) return null;\n\n\t// at least one must be targeted.\n    if (targets.length == 0) {\n        console.warn(game.ConditionManager.CM_CONST.CM_LABEL + \" | No token targeted.\");\n        return null;\n    };\n\t\n\t// only one must be targeted.\n    if (targets.length > 1) {\n        console.warn(game.ConditionManager.CM_CONST.CM_LABEL + \" | Only one token can be targeted.\");\n        return null;\n    };\n\n\treturn targets[0].actor;\n}\n\n/**\n* callbackApply()\n*\n* Apply a condition to a target and override default effect attribute values.\n*/\n\nasync function callbackApply() {\n    // get target.\n    var target = getTargetedActor();\n    if (target == null) return false;\n\n    // get ConditionManager namespace.\n    var cmn = game.ConditionManager;\n    if (cmn == null) return false;\n\n    // get condition manager.\n    var mgr = cmn.getConditionManager();\n    if (mgr == null) return false;\n\n    var retval;\n\n    // apply.\n    retval = await mgr.apply(cmn.CM_CONST.BLEEDING_LABEL, target);\n    if (!retval) return false;\n\n    // set duration of turns to 2.\n    retval = await mgr.setDuration(cmn.CM_CONST.BLEEDING_LABEL, cmn.CM_CONST.TURNS, 2, target);\n    if (!retval) return false;\n\n    // set effect value to -5 (default is -3).\n    retval = await mgr.setEffectAttribute(cmn.CM_CONST.BLEEDING_LABEL, cmn.CM_CONST.ATTRIBUTE_HP_KEY, cmn.CM_CONST.ATTRIBUTE_VALUE, -5, target);\n    if (!retval) return false;\n\n    // set effect change mode to MULTIPLY (default is ADD).\n    retval = await mgr.setEffectAttribute(cmn.CM_CONST.BLEEDING_LABEL, cmn.CM_CONST.ATTRIBUTE_HP_KEY, cmn.CM_CONST.CHANGE_MODE, cmn.CM_CONST.MODE_MULTIPLY, target);\n    if (!retval) return false;\n\n    return true;\n}\n\n/**\n* callbackUpdate()\n*\n* Modify an applied condition and an effect attribute value.\n*/\n\nasync function callbackUpdate() {\n    // get target.\n    var target = getTargetedActor();\n    if (target == null) return false;\n\n    // get ConditionManager namespace.\n    var cmn = game.ConditionManager;\n    if (cmn == null) return false;\n\n    // get condition manager.\n    var mgr = cmn.getConditionManager();\n    if (mgr == null) return false;\n\n    var retval;\n\n    // set duration of turns to null (was set to 2 by apply).\n    retval = await mgr.setDuration(cmn.CM_CONST.BLEEDING_LABEL, cmn.CM_CONST.TURNS, null, target);\n    if (!retval) return false;\n\n    // set duration of rounds to 10.\n    retval = await mgr.setDuration(cmn.CM_CONST.BLEEDING_LABEL, cmn.CM_CONST.ROUNDS, 10, target);\n    if (!retval) return false;\n\n    // set effect value to -10 (was set to -5 by apply).\n    retval = await mgr.setEffectAttribute(cmn.CM_CONST.BLEEDING_LABEL, cmn.CM_CONST.ATTRIBUTE_HP_KEY, cmn.CM_CONST.ATTRIBUTE_VALUE, -10, target);\n    if (!retval) return false;\n\n    return true;\n}\n\n/**\n* callbackRemove()\n*\n* Remove an applied condition.\n*/\n\nasync function callbackRemove() {\n    // get target.\n    var target = getTargetedActor();\n    if (target == null) return false;\n\n    // get ConditionManager namespace.\n    var cmn = game.ConditionManager;\n    if (cmn == null) return false;\n\n    // get condition manager.\n    var mgr = cmn.getConditionManager();\n    if (mgr == null) return false;\n\n    var retval;\n\n    // remove.\n    retval = await mgr.remove(cmn.CM_CONST.BLEEDING_LABEL, target);\n    if (!retval) return false;\n\n    return true;\n}\n\n/**\n* main.\n*/\n\nfunction main() {\n\t// only allow GM's to execute this macro.\n    if (!game.user.isGM) return;\n\n\t// begin.\n    showDialog();\n}\n\nmain();","author":"ozsyqur2oxGbhWjU","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"ZRsYX0GCz3UVVdVu"}
